<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NBI Administrative Notifications</title>
    <link rel="stylesheet" href="/css/admin_dashboard.css">
    <link rel="stylesheet" href="/css/admin_notification.css">
</head>
<body>
    <div class="sidebar">
        <div class="logo">
            <img src="/images/nbi_logo.png" alt="Logo">
        </div>
        <nav>
            <ul>
                <li><a href="/admin-dashboard"><i class="nav-item nav-link"></i> Dashboard</a></li>
                <li><a href="/admin-users"><i class="nav-item nav-link"></i> Users</a></li>
                <li><a href="/admin-upload"><i class="nav-item nav-link"></i> Upload</a></li>
                <li><a href="/admin-addcase"><i class="nav-item nav-link"></i> Add Case</a></li>
                <li><a href="/admin-reports"><i class="nav-item nav-link"></i> Reports</a></li>
                <li><a href="/admin-notification"><i class="nav-item nav-link"></i> Notification</a></li>
                <li><a href="/admin-logs"><i class="nav-item nav-link"></i> Logs</a></li>
                <li><a href="/admin_profile"><i class="nav-item nav-link"></i> Profile</a></li>
                <li><a href="/admin-trash"><i class="nav-item nav-link"></i> Trash</a></li>
            </ul>
        </nav>
        <div class="logout">
            <a href="/logout">
                <button>Log Out</button>
            </a>
        </div>
    </div>

    <div class="content">
        <div class="notification-header">
            <h1>Administrative Notifications</h1>
            <div class="notification-filters">
                <button class="filter-button active" onclick="filterNotifications('all')">All</button>
                <button class="filter-button" onclick="filterNotifications('unread')">Unread</button>
                <button class="filter-button" onclick="filterNotifications('priority')">Priority</button>
            </div>
        </div>

        <div class="notification-container" id="notificationList">
            <!-- Notifications will be dynamically inserted here -->
        </div>
    </div>

    <script id="notificationsData" type="application/json">
        <%- JSON.stringify(notifications) %>
    </script>
    <script>
        let notifications = JSON.parse(document.getElementById('notificationsData').textContent);

        function getTimeAgo(timestamp) {
            const now = new Date();
            const notificationDate = new Date(timestamp);
            const diffInMinutes = Math.floor((now - notificationDate) / 60000);

            if (diffInMinutes < 60) {
                return `${diffInMinutes} minutes ago`;
            } else if (diffInMinutes < 1440) {
                const hours = Math.floor(diffInMinutes / 60);
                return `${hours} hours ago`;
            } else {
                const days = Math.floor(diffInMinutes / 1440);
                return `${days} days ago`;
            }
        }

        function getPriorityClass(type) {
            switch(type) {
                case 'new_user': return 'priority-medium';
                case 'new_upload': return 'priority-high';
                case 'new_inquiry': return 'priority-high';
                default: return 'priority-low';
            }
        }

        function renderNotifications(filter = 'all') {
            const container = document.getElementById('notificationList');
            container.innerHTML = '';

            let filteredNotifications = notifications;
            if (filter === 'unread') {
                filteredNotifications = notifications.filter(n => !n.is_read);
            } else if (filter === 'priority') {
                filteredNotifications = notifications.filter(n => n.type === 'new_upload' || n.type === 'new_inquiry');
            }

            filteredNotifications.forEach(notification => {
                const notificationElement = document.createElement('div');
                notificationElement.className = `notification-item ${!notification.is_read ? 'unread' : ''}`;
                notificationElement.innerHTML = `
                    <div class="notification-icon">
                        <span class="priority-indicator ${getPriorityClass(notification.type)}"></span>
                    </div>
                    <div class="notification-content">
                        <div class="notification-title">
                            ${getNotificationTitle(notification.type)}
                        </div>
                        <div class="notification-message">
                            ${notification.message}
                        </div>
                        <div class="notification-meta">
                            <span>${notification.type} â€¢ ${getTimeAgo(notification.created_at)}</span>
                            <div class="notification-actions">
                                ${!notification.is_read ? 
                                    `<button class="action-button mark-read" onclick="markAsRead(${notification.id})">Mark as Read</button>` : 
                                    ''}
                                <button class="action-button delete" onclick="deleteNotification(${notification.id})">Delete</button>
                            </div>
                        </div>
                    </div>
                `;
                container.appendChild(notificationElement);
            });
        }

        function getNotificationTitle(type) {
            switch(type) {
                case 'new_user': return 'New User Registered';
                case 'new_upload': return 'New File Upload';
                case 'new_inquiry': return 'New Inquiry Submitted';
                default: return 'Notification';
            }
        }

        function filterNotifications(filter) {
            document.querySelectorAll('.filter-button').forEach(button => {
                button.classList.remove('active');
            });
            event.target.classList.add('active');
            renderNotifications(filter);
        }

        function markAsRead(id) {
            fetch(`/api/admin-notifications/${id}/read`, { method: 'POST' })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const notification = notifications.find(n => n.id === id);
                        if (notification) {
                            notification.is_read = true;
                            renderNotifications();
                        }
                    }
                })
                .catch(error => console.error('Error marking notification as read:', error));
        }

        function deleteNotification(id) {
            fetch(`/api/admin-notifications/${id}`, { method: 'DELETE' })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        notifications = notifications.filter(n => n.id !== id);
                        renderNotifications();
                    }
                })
                .catch(error => console.error('Error deleting notification:', error));
        }

        // Initial render
        document.addEventListener('DOMContentLoaded', () => {
            renderNotifications();
        });

        // Fetch new notifications every 30 seconds
        setInterval(() => {
            fetch('/api/admin-notifications')
                .then(response => response.json())
                .then(data => {
                    notifications = data;
                    renderNotifications();
                })
                .catch(error => console.error('Error fetching notifications:', error));
        }, 30000);
    </script>
</body>
</html>

