<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NBI SKGV - Notifications</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/css/user-notif.css">
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <style>
        .notification-actions {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }
        .btn {
            padding: 5px 10px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        .btn-read {
            background-color: #4CAF50;
            color: white;
        }
        .btn-delete {
            background-color: #f44336;
            color: white;
        }
        .notification-item.read {
            opacity: 0.6;
        }
        .notification-icon {
            font-size: 24px;
            margin-right: 10px;
        }
        .resolved-icon {
            color: #4CAF50;
        }
    </style>
</head>
<body>
    <div class="navbar">
        <div class="navbar-left">
            <div class="hamburger" onclick="toggleSidebar()">‚ò∞</div>
            <img src="/images/nbi_logo.png" alt="NBI Logo" class="navbar-logo">
            <div class="title">NBI SKGV</div>
        </div>
        <div class="search-container">
            <input type="text" id="searchInput" placeholder="Search notifications..." aria-label="Search">
        </div>
        <div class="navbar-right profile-settings">
            <div class="icon" id="profileIcon" role="button" aria-label="Profile">üë§</div>
            <div class="icon" id="settingsIcon" role="button" aria-label="Settings">‚öôÔ∏è</div>
        </div>
    </div>

    <div id="sidebar" class="sidebar">
        <ul>
            <li><a href="/user_home"><span class="sidebar-icon">üè†</span>Home</a></li>
            <li><a href="/user_upload"><span class="sidebar-icon">üì§</span>Upload</a></li>
            <li><a href="/user_notifications"><span class="sidebar-icon">üîî</span>Notification</a></li>
            <li><a href="/user-trash"><span class="sidebar-icon">üóëÔ∏è</span>Trash</a></li>
        </ul>
        <div class="logout" onclick="handleLogout()" role="button" tabindex="0">
            <span class="sidebar-icon">üö™</span>Logout
        </div>
    </div>

    <div id="content" class="content">
        <h1>Notifications</h1>
        <div id="notification-list" class="notification-list">
            <!-- Notifications will be dynamically inserted here -->
        </div>
    </div>

    <script>
        let sidebarOpen = false;

        function toggleSidebar() {
            const sidebar = document.getElementById('sidebar');
            const content = document.getElementById('content');
            sidebarOpen = !sidebarOpen;
            sidebar.classList.toggle('open');
            content.classList.toggle('shifted');
            
            if (window.innerWidth <= 768) {
                document.body.style.marginLeft = sidebarOpen ? '100%' : '0';
            }
        }

        function redirectToPage(url) {
            window.location.href = url;
        }

        function handleLogout() {
            fetch('/logout', { method: 'GET' })
                .then(response => {
                    if (response.ok) {
                        window.location.href = '/login'; 
                    }
                })
                .catch(error => {
                    console.error('Logout error:', error);
                });
        }

        function fetchNotifications() {
            axios.get('/api/notifications')
                .then(response => {
                    const notifications = response.data;
                    const notificationList = document.getElementById('notification-list');
                    notificationList.innerHTML = '';

                    notifications.forEach(notification => {
                        const notificationItem = document.createElement('div');
                        notificationItem.className = `notification-item ${notification.is_read ? 'read' : ''}`;

                        let iconClass = 'notification-icon';
                        let icon = 'üîî';

                        if (notification.type === 'report_resolved') {
                            icon = '‚úÖ';
                            iconClass += ' resolved-icon';
                        }

                        notificationItem.innerHTML = `
                            <div class="${iconClass}">${icon}</div>
                            <div class="notification-content">
                                <div class="notification-title">${notification.type === 'report_resolved' ? 'Report Resolved' : notification.type}</div>
                                <div class="notification-message">${notification.message}</div>
                                <div class="notification-time">${new Date(notification.created_at).toLocaleString()}</div>
                            </div>
                            <div class="notification-actions">
                                ${!notification.is_read ? `<button class="btn btn-read" onclick="markAsRead(${notification.id})">Mark as Read</button>` : ''}
                                <button class="btn btn-delete" onclick="deleteNotification(${notification.id})">Delete</button>
                            </div>
                        `;
                        notificationList.appendChild(notificationItem);
                    });

                    searchNotifications();
                })
                .catch(error => {
                    console.error('Error fetching notifications:', error);
                });
        }

        function markAsRead(notificationId) {
            axios.post(`/api/notifications/${notificationId}/read`)
                .then(response => {
                    if (response.data.success) {
                        fetchNotifications();
                    }
                })
                .catch(error => {
                    console.error('Error marking notification as read:', error);
                });
        }

        function deleteNotification(notificationId) {
            axios.delete(`/api/notifications/${notificationId}`)
                .then(response => {
                    if (response.data.success) {
                        fetchNotifications();
                    }
                })
                .catch(error => {
                    console.error('Error deleting notification:', error);
                });
        }

        function searchNotifications() {
            const searchInput = document.getElementById('searchInput');
            const notificationList = document.getElementById('notification-list');
            const searchTerm = searchInput.value.toLowerCase();
            const notificationItems = notificationList.getElementsByClassName('notification-item');

            Array.from(notificationItems).forEach(item => {
                const title = item.querySelector('.notification-title').textContent.toLowerCase();
                const message = item.querySelector('.notification-message').textContent.toLowerCase();
                
                if (title.includes(searchTerm) || message.includes(searchTerm)) {
                    item.style.display = '';
                } else {
                    item.style.display = 'none';
                }
            });
        }

        document.addEventListener('DOMContentLoaded', function() {
            const profileIcon = document.getElementById('profileIcon');
            const settingsIcon = document.getElementById('settingsIcon');

            profileIcon.addEventListener('click', function() {
                redirectToPage('/profile');
            });

            settingsIcon.addEventListener('click', function() {
                redirectToPage('/settings');
            });

            const searchInput = document.getElementById('searchInput');
            searchInput.addEventListener('input', searchNotifications);

            fetchNotifications();
        });

        document.addEventListener('click', function(event) {
            const sidebar = document.getElementById('sidebar');
            const hamburger = document.querySelector('.hamburger');
            if (sidebarOpen && !sidebar.contains(event.target) && event.target !== hamburger) {
                toggleSidebar();
            }
        });

        window.addEventListener('resize', function() {
            if (window.innerWidth > 768) {
                document.body.style.marginLeft = '0';
            }
        });
    </script>
</body>
</html>

